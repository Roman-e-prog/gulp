let pool=require("../db/dbConnect"),createTodo=async(o,t)=>{o=o.body.todo;try{var e=await pool.query("INSERT INTO todosTable (todo, createdAt, updatedAt) Values ($1, $2, $3) RETURNING *",[o,new Date(new Date).toISOString(),new Date(new Date).toISOString()]);t.status(200).json(e.rows[0])}catch(o){t.status(500).json({error:o.message})}},updateTodo=async(o,t)=>{var e=o.params.id,o=o.body.todo;try{var a=await pool.query("UPDATE todosTable SET todo=$1, updatedAt=$2 WHERE todo_id=$3",[o,new Date((new Date).toISOString()),e]);t.status(200).json(a.rows[0])}catch(o){t.status(404).json("Not found")}},deleteTodo=async(o,t)=>{o=o.params.id;try{await pool.query("DELETE FROM todosTable WHERE todo_id=$1",[o]);t.status(200).json(`Todo mit der id ${o} wurde gelöscht`)}catch(o){t.status(404).json("Not found")}},getTodo=async(o,t)=>{o=o.params.id;try{var e=await pool.query("SELECT * FROM todosTable WHERE todo_id=$1",[o]);t.status(200).json(e.rows[0])}catch(o){t.status(404).json("Not found")}},getAllTodo=async(o,t)=>{try{var e=await pool.query("SELECT * FROM todosTable");t.status(200).json(e.rows)}catch(o){t.status(404).json("Keine Einträge gefunden")}},todosController={createTodo:createTodo,updateTodo:updateTodo,deleteTodo:deleteTodo,getTodo:getTodo,getAllTodo:getAllTodo};module.exports=todosController;